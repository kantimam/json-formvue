{"version":3,"sources":["webpack://formvue-json/../../../src/components/VProgressCircular/VProgressCircular.ts","webpack://formvue-json/../../../src/components/VProgressCircular/index.ts","webpack://formvue-json/./node_modules/vuetify/src/components/VProgressCircular/VProgressCircular.sass?1e00"],"names":[],"mappings":"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","file":"formvue-json.common.2.js","sourcesContent":["// Styles\nimport './VProgressCircular.sass'\n\n// Directives\nimport intersect from '../../directives/intersect'\n\n// Mixins\nimport Colorable from '../../mixins/colorable'\n\n// Utils\nimport { convertToUnit } from '../../util/helpers'\n\n// Types\nimport { VNode, VNodeChildren } from 'vue'\n\n/* @vue/component */\nexport default Colorable.extend({\n  name: 'v-progress-circular',\n\n  directives: { intersect },\n\n  props: {\n    button: Boolean,\n    indeterminate: Boolean,\n    rotate: {\n      type: [Number, String],\n      default: 0,\n    },\n    size: {\n      type: [Number, String],\n      default: 32,\n    },\n    width: {\n      type: [Number, String],\n      default: 4,\n    },\n    value: {\n      type: [Number, String],\n      default: 0,\n    },\n  },\n\n  data: () => ({\n    radius: 20,\n    isVisible: true,\n  }),\n\n  computed: {\n    calculatedSize (): number {\n      return Number(this.size) + (this.button ? 8 : 0)\n    },\n\n    circumference (): number {\n      return 2 * Math.PI * this.radius\n    },\n\n    classes (): object {\n      return {\n        'v-progress-circular--visible': this.isVisible,\n        'v-progress-circular--indeterminate': this.indeterminate,\n        'v-progress-circular--button': this.button,\n      }\n    },\n\n    normalizedValue (): number {\n      if (this.value < 0) {\n        return 0\n      }\n\n      if (this.value > 100) {\n        return 100\n      }\n\n      return parseFloat(this.value)\n    },\n\n    strokeDashArray (): number {\n      return Math.round(this.circumference * 1000) / 1000\n    },\n\n    strokeDashOffset (): string {\n      return ((100 - this.normalizedValue) / 100) * this.circumference + 'px'\n    },\n\n    strokeWidth (): number {\n      return Number(this.width) / +this.size * this.viewBoxSize * 2\n    },\n\n    styles (): object {\n      return {\n        height: convertToUnit(this.calculatedSize),\n        width: convertToUnit(this.calculatedSize),\n      }\n    },\n\n    svgStyles (): object {\n      return {\n        transform: `rotate(${Number(this.rotate)}deg)`,\n      }\n    },\n\n    viewBoxSize (): number {\n      return this.radius / (1 - Number(this.width) / +this.size)\n    },\n  },\n\n  methods: {\n    genCircle (name: string, offset: string | number): VNode {\n      return this.$createElement('circle', {\n        class: `v-progress-circular__${name}`,\n        attrs: {\n          fill: 'transparent',\n          cx: 2 * this.viewBoxSize,\n          cy: 2 * this.viewBoxSize,\n          r: this.radius,\n          'stroke-width': this.strokeWidth,\n          'stroke-dasharray': this.strokeDashArray,\n          'stroke-dashoffset': offset,\n        },\n      })\n    },\n    genSvg (): VNode {\n      const children = [\n        this.indeterminate || this.genCircle('underlay', 0),\n        this.genCircle('overlay', this.strokeDashOffset),\n      ] as VNodeChildren\n\n      return this.$createElement('svg', {\n        style: this.svgStyles,\n        attrs: {\n          xmlns: 'http://www.w3.org/2000/svg',\n          viewBox: `${this.viewBoxSize} ${this.viewBoxSize} ${2 * this.viewBoxSize} ${2 * this.viewBoxSize}`,\n        },\n      }, children)\n    },\n    genInfo (): VNode {\n      return this.$createElement('div', {\n        staticClass: 'v-progress-circular__info',\n      }, this.$slots.default)\n    },\n    onObserve (entries: IntersectionObserverEntry[], observer: IntersectionObserver, isIntersecting: boolean) {\n      this.isVisible = isIntersecting\n    },\n  },\n\n  render (h): VNode {\n    return h('div', this.setTextColor(this.color, {\n      staticClass: 'v-progress-circular',\n      attrs: {\n        role: 'progressbar',\n        'aria-valuemin': 0,\n        'aria-valuemax': 100,\n        'aria-valuenow': this.indeterminate ? undefined : this.normalizedValue,\n      },\n      class: this.classes,\n      directives: [{\n        name: 'intersect',\n        value: this.onObserve,\n      }],\n      style: this.styles,\n      on: this.$listeners,\n    }), [\n      this.genSvg(),\n      this.genInfo(),\n    ])\n  },\n})\n","import VProgressCircular from './VProgressCircular'\n\nexport { VProgressCircular }\nexport default VProgressCircular\n","// extracted by mini-css-extract-plugin"],"sourceRoot":""}